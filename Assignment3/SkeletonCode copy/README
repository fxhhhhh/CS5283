################################################################################################
#
# Author: Aniruddha Gokhale, Xihan Fu
# Institution: Vanderbilt University
# Course: CS4283/5283 Computer Networks
#
# Purpose:
#    This directory contains the skeleton code that students can use to do their
#    programming assignment. This particular code is tailored to suit PA1
#    where our main purpose is to provide an Application Layer custom protocol
#    that we have defined to support a Smart Refrigerator IoT edge device.
#
#    This refrigerator can send either a grocery order or a health status message
#    to two different servers. The message format is defined in the specification.
#    Data serialization can use either JSON or Flatbuffers. Others can easily be
#    added.
#
#    We mimic the layers as follows:
#
#    Business Logic layer
#    	Encoded in application level code as follows
#   	   (1) refrigerator.py - represents the client-side logic of the smart refrigerator
#   	   (2) grocery_server.py - represents the server-side logic of the grocery server
#   	   (3) health_server.py - represents the server-side logic of the health server
#   	   (4) router.py - represents the logic of the router
#          (5) config.ini - represents a common system-wide set of configurations which could be 'json' or 'fbufs'
#                           provide enough information
#
#    Application Layer
#    	Defined under the applnlayer subfolder. This contains the following files:
#	        (1) ApplnMessageTypes.py - defines skeletons for the 3 message types supported by our
#                                     custom application protocol

#           (2) CustomApplnProtocol.py - defines all the logic to send/receive the different
#                                       messages and the exceptions that can be raised
#
#    Transport Layer
#       Defined under the transportlayer subfolder. This contains the following files:
#          (1) CustomTransportProtocol.py - reconstruct the information, for each chunk, we add the target ip address
#                                           and whole size, and write 3 different protocol here: Alt AB/ Go back N/ Select N
#
#
#
#    Network Layer
#       Defined under the networklayer subfolder. This contains the following files:
#          (1) CustomNetworkProtocol.py - inside we initialize the router, client and server
#                                         for server, we initialize it as rep, and for client we initialize it as a dealer and req
#                                         for router, we initialize it as a poller + dealer
#                                         so that, in the go back n and select n protocol we could send message sequentially
#                                         for each router, we use their id and target ip to identify the next hop
#
#
#    flatbuffers
#       flatbuffer package to avoid the error caused by the the path of flatbuffer
#
#    FlatBuffers1
#       Defined the code under Flatbuffers serialization frameworks. This contains the following files:
#          (1) CustomAppProto - the schema after flatc
#          (2) grocery_serialize.py - the serialization and deserialization function of GroceryOrderMessage
#          (3) health_serialize.py - the serialization and deserialization function of HealthStatusMessage
#          (4) response_serialize.py - the serialization and deserialization function of ResponseMessage
#          (5) schema_grocery.fbs - the schema of GroceryOrderMessage
#          (6) schema_health.fbs - the schema of HealthStatusMessage
#          (7) schema_response.fbs - the schema of ResponseMessage
#
#    Json
#       Defined the code under Json serialization frameworks. This contains the following files:
#          (1) response_serialize.py - the serialization and deserialization function of ResponseMessage
#          (2) grocery_serialize.py - the serialization and deserialization function of GroceryOrderMessage
#          (3) health_serialize.py - the serialization and deserialization function of HealthStatusMessage
#
#    Pseudo Link Layer
#       Suported by our ZeroMQ messaging layer
#
#    (Pseudo) Physical Layer
#       Supports the actual communication. This can be intra-host using localhost, or mininet,
#       or Docker Swarm/Kubernetes cluster or actual distributed hosts
#
#
#    use it in the mininet:
#    1) cd in the correct directory, for me, it should be:
#       cd /home/xihanfu/Desktop/Parallels Shared Folders/Home/Documents/2022Fall/CS5283/Assignment1/SkeletonCode'
#    2) use the mininet operation create the topology, for example:
#       sudo mn --topo=single,3 --link=tc,delay=10ms
#    3) after getting the topology, you could open the host's terminal and log into the host
#       xterm h1 h2 h3 h4 h5 h6
#    3) set grocery_server at h3, health_server at h2, refrigerator at h1
#       in h2 : python3 router.py -a 10.0.0.2 -p 4444
#       in h3 : python3 router.py -a 10.0.0.3 -p 4444
#       in h4 : python3 router.py -a 10.0.0.4 -p 4444
#       in h5 : python3 grocery_server.py
#       in h6 : python3 health_server.py
#       in h1 : python3 refrigerator.py -g 10.0.0.5 -s 10.0.0.6
#    4) then you could run the project successfully
#
#
#
#
#
#################################################################################################