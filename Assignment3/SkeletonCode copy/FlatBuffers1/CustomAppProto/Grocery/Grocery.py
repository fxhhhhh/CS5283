# automatically generated by the FlatBuffers1 compiler, do not modify

# namespace: Grocery

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Grocery(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Grocery()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGrocery(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Grocery
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Grocery
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # Grocery
    def Veggie(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from CustomAppProto.Grocery.veggie1 import veggie1
            obj = veggie1()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Grocery
    def Milk(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 8
            from CustomAppProto.Grocery.milk1 import milk1
            obj = milk1()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Grocery
    def MilkLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Grocery
    def MilkIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Grocery
    def Bread(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 8
            from CustomAppProto.Grocery.bread1 import bread1
            obj = bread1()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Grocery
    def BreadLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Grocery
    def BreadIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Grocery
    def Meat(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 8
            from CustomAppProto.Grocery.meat1 import meat1
            obj = meat1()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Grocery
    def MeatLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Grocery
    def MeatIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Grocery
    def Drinks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = o + self._tab.Pos
            from CustomAppProto.Grocery.drinks1 import drinks1
            obj = drinks1()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def GroceryStart(builder): builder.StartObject(6)
def Start(builder):
    return GroceryStart(builder)
def GroceryAddType(builder, type): builder.PrependInt16Slot(0, type, 0)
def AddType(builder, type):
    return GroceryAddType(builder, type)
def GroceryAddVeggie(builder, veggie): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(veggie), 0)
def AddVeggie(builder, veggie):
    return GroceryAddVeggie(builder, veggie)
def GroceryAddMilk(builder, milk): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(milk), 0)
def AddMilk(builder, milk):
    return GroceryAddMilk(builder, milk)
def GroceryStartMilkVector(builder, numElems): return builder.StartVector(8, numElems, 4)
def StartMilkVector(builder, numElems):
    return GroceryStartMilkVector(builder, numElems)
def GroceryAddBread(builder, bread): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(bread), 0)
def AddBread(builder, bread):
    return GroceryAddBread(builder, bread)
def GroceryStartBreadVector(builder, numElems): return builder.StartVector(8, numElems, 4)
def StartBreadVector(builder, numElems):
    return GroceryStartBreadVector(builder, numElems)
def GroceryAddMeat(builder, meat): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(meat), 0)
def AddMeat(builder, meat):
    return GroceryAddMeat(builder, meat)
def GroceryStartMeatVector(builder, numElems): return builder.StartVector(8, numElems, 4)
def StartMeatVector(builder, numElems):
    return GroceryStartMeatVector(builder, numElems)
def GroceryAddDrinks(builder, drinks): builder.PrependStructSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(drinks), 0)
def AddDrinks(builder, drinks):
    return GroceryAddDrinks(builder, drinks)
def GroceryEnd(builder): return builder.EndObject()
def End(builder):
    return GroceryEnd(builder)