# automatically generated by the FlatBuffers1 compiler, do not modify

# namespace: Response

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Response(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Response()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Response
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Response
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 2

    # Response
    def Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # Response
    def Contents(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

def ResponseStart(builder): builder.StartObject(3)
def Start(builder):
    return ResponseStart(builder)
def ResponseAddType(builder, type): builder.PrependInt16Slot(0, type, 2)
def AddType(builder, type):
    return ResponseAddType(builder, type)
def ResponseAddCode(builder, code): builder.PrependInt16Slot(1, code, 0)
def AddCode(builder, code):
    return ResponseAddCode(builder, code)
def ResponseAddContents(builder, contents): builder.PrependInt16Slot(2, contents, 0)
def AddContents(builder, contents):
    return ResponseAddContents(builder, contents)
def ResponseEnd(builder): return builder.EndObject()
def End(builder):
    return ResponseEnd(builder)