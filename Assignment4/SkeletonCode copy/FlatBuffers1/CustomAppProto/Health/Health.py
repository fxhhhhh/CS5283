# automatically generated by the FlatBuffers1 compiler, do not modify

# namespace: Health

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Health(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Health()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHealth(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Health
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Health
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 1

    # Health
    def Dispenser(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Health
    def Icemaker(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Health
    def Lightbulb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Health
    def FridgeTemp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Health
    def FreezerTemp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Health
    def SensorStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def HealthStart(builder): builder.StartObject(7)
def Start(builder):
    return HealthStart(builder)
def HealthAddType(builder, type): builder.PrependInt16Slot(0, type, 1)
def AddType(builder, type):
    return HealthAddType(builder, type)
def HealthAddDispenser(builder, dispenser): builder.PrependUint32Slot(1, dispenser, 0)
def AddDispenser(builder, dispenser):
    return HealthAddDispenser(builder, dispenser)
def HealthAddIcemaker(builder, icemaker): builder.PrependUint32Slot(2, icemaker, 0)
def AddIcemaker(builder, icemaker):
    return HealthAddIcemaker(builder, icemaker)
def HealthAddLightbulb(builder, lightbulb): builder.PrependUint32Slot(3, lightbulb, 0)
def AddLightbulb(builder, lightbulb):
    return HealthAddLightbulb(builder, lightbulb)
def HealthAddFridgeTemp(builder, fridgeTemp): builder.PrependUint32Slot(4, fridgeTemp, 0)
def AddFridgeTemp(builder, fridgeTemp):
    return HealthAddFridgeTemp(builder, fridgeTemp)
def HealthAddFreezerTemp(builder, freezerTemp): builder.PrependUint32Slot(5, freezerTemp, 0)
def AddFreezerTemp(builder, freezerTemp):
    return HealthAddFreezerTemp(builder, freezerTemp)
def HealthAddSensorStatus(builder, sensorStatus): builder.PrependUint32Slot(6, sensorStatus, 0)
def AddSensorStatus(builder, sensorStatus):
    return HealthAddSensorStatus(builder, sensorStatus)
def HealthEnd(builder): return builder.EndObject()
def End(builder):
    return HealthEnd(builder)